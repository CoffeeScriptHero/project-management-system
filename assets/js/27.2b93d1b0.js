(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{708:function(e,s,n){"use strict";n.r(s);var t=n(47),a=Object(t.a)({},(function(){var e=this.$createElement,s=this._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[this._v("#")]),this._v(" RESTfull сервіс для управління даними")]),this._v(" "),s("div",{staticClass:"language-import fastapi extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport pymysql\n\n\napp = FastAPI()\nclass DataBase(object):\n    def __new__(cls):\n        if not hasattr(cls, 'instance'):\n            cls.instance = super(DataBase, cls).__new__(cls)\n        return cls.instance\n    def __init__(self):\n        self.connection = None\n        self.cursor = None\n        self.__connect()\n    def __connect(self):\n        self.connection = pymysql.connect(\n        host='localhost',\n        port=3306,\n        user='root',\n        password='',\n        database='mydb',)\n        self.cursor = self.connection.cursor(pymysql.cursors.DictCursor)\n    def execute(self, command):\n        self.cursor.execute(command)\n        result = self.cursor.fetchall()\n        self.connection.commit()\n        return result\n\n\n@app.get(\"/api/allusers\")\nasync def get_users():\n    db = DataBase()\n    return JSONResponse(db.execute('SELECT * FROM Profile'))\n\n\n@app.get('/api/user/{id}')\ndef get_user_by_id(id):\n    db = DataBase()\n    result = db.execute(f'SELECT * FROM Profile WHERE userid={id}')\n    if not result:\n        raise fastapi.HTTPException(status_code=404)\n    return JSONResponse(result)\n\n\n@app.post('/api/adduser', status_code=201)\nasync def add_new_user(req: Request):\n    req_dict = await req.json()\n    try:\n        username = req_dict['username']\n        password = req_dict['password']\n        email = req_dict['email']\n        role = req_dict['role']\n\n    except:\n        raise fastapi.HTTPException(status_code=400)\n    db = DataBase()\n    db.execute(\n        f\"INSERT INTO `Profile`(`username`,`password`,`email`,`Roletype_role`) VALUES ('{username}','{password}','{email}',{role});\")\n    if role == 2:\n        return {'message': f'New user {username} added!'}\n    elif role == 1:\n        return {'message': f'New admin {username} added!'}\n\n\n@app.put('/api/updateuser/{id}')\nasync def update_user(id, req: Request):\n    req_dict = await req.json()\n    db = DataBase()\n    for key in req_dict:\n        if not db.execute(f'SELECT * FROM Profile WHERE userid={id}'):\n            raise fastapi.HTTPException(status_code=404)\n        db.execute(f'UPDATE Profile SET {key}=\"{req_dict[key]}\" WHERE userid={id}')\n    return {\"message\":'Updated!'}\n\n\n@app.delete('/api/deleteuser/{id}')\ndef delete(id):\n    db = DataBase()\n    if not db.execute(f'SELECT * FROM Profile WHERE userid={id}'):\n        raise fastapi.HTTPException(status_code=404)\n    db.execute(f'DELETE FROM `Profile` WHERE userid={id}')\n    return {'message':f'User with id={id} deleted'}```")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);